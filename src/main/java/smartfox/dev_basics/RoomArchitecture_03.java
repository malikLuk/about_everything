/**
 *
 * Объект Комнаты - это один из наиболее важных строительных блоков в структуре многопользовательского приложения. Он отвечает за группировку
 * и связь игроков вместе и дает им возможность взаимодействовать друг с другом. Каждой Комнатой может управлять отдельный Экстеншен на стороне
 * сервера.
 * Переменные Комнаты доступны для хранения данных игрока, а серверный апи предлагает функции поиска комнат по игрокам, совпадениям, приглашениям
 * и т д.
 * Настройки Комнат. Базовые:
 *  - name
 *  - password (op). Если существует, Комната становится приватной
 *  - maxUsers (op, default 20). Максимальное кол-во игроков в Комнате
 *  - maxVariablesAllowed (op, default 5). Максимальное количество Переменных Комнаты
 *  - isGame (op). Флаг, показывающий, игровая Комната или нет
 *  - maxSpectators(op, default 0). Если это игровая Комната, то устанавливает максимальное количество спектраторов
 * Продвинутые настройки:
 *  - autoRemoveMode (op). Определяет жизненный цикл Комнаты, другими словами, момент времени, когда она должна быть удалена.
 *      Чтобы активировать автоудаление Комнат, нужно выставить флаг isDynamic = true. Фича доступна только серверу. Комнаты,
 *      созданные клиентом живут DEFAULT-жизненным циклом. Настройка предоставляет 4 способа управления жизенным циклом:
 *          ** DEFAULT. В этом режиме обычная Комната удаляется, когда становится пустой и ее создатель разлогинился из Зоны.
 *              А игровая Комната удаляется, когда опустеет.
 *          ** WHEN_EMPTY. Комната удаляется, когда становится пустой.
 *          ** WHEN_EMPTY_AND_CREATOR_IS_GONE. Комната удаляется, когда становится пустой и ее создатель разлогинился из Зоны.
 *          ** NEVER. Комната не удаляется никогда.
 *  - roomVariables (op). Предоставляет список Переменных Комнаты, которые будут закреплены за Комнатой после ее создания
 *  - extension (op). Динамечески присоединяемый к Комнате со стороны сервера Экстеншен, добавляющий кастомную логику
 * Доп. настройки:
 *  - roomSettings (op). Позволяет определить права и события, которыми оперирует Комната
 *  - badWordsFilter (op). Опции мат-фильтра
 *  - customPlayerIdGeneratorClass (op). Позволяет подставить вместо стандартного генератора ид игроков свой собственный
 * Переменные Комнаты (ПК). Это полезный механизм для хранения некоторых данных в Комнате для поддержания ее состояния. Эти Переменные автоматически
 * синхронизируются между всеми пользователями Комнаты, что позволяет использовать их для быстрого изменения игрового состояния и рассылки его
 * всем игрокам. Апи смартфокса предоставляет несколько настроек для контроля доступа, жизненного цикла и видимости каждой Переменной Комнаты:
 *  - name. Уникальное имя Переменной
 *  - isPrivate (op, default false). Если ПК приватная, то изменять или удалять ее может только создатель
 *  - isPersistent (op, default false). По умолчанию ПК, созданная пользователем, удаляется из Комнаты, когда пользователь покидает ее.
 *      Если isPersistent = true, то ПК будет жить до тех пор, пока игрок не разлогинится в принципе.
 *  - isGlobal (op, default false). По умолчанию обновления ПК отправляются всем пользователям в Комнате. Глобальяна ПК обновляется для
 *      всех пользователей Группы Комнат.
 *  - isHidden (op, default false). Если true, то эту ПК видит только сервер. Клиент никогда не увидит.
 *  - value. Значение ПК. Поддерживаются следующие типы:
 *      ** Boolean
 *      ** Integer
 *      ** Double
 *      ** String
 *      ** SFSObject
 *      ** SFSArray
 *      ** Null (это не тип, просто когда ПК становится null - это маркер для того, чтобы ее удалить)
 * На стороне сервера можно создать ПК, которые будут принадлежать непосредственно серверу. Это что-то типа виртуального пользователя, который
 * никогда не покинет систему и значит, ПК никогда не удалится. Для этого надо передать null в качестве владельца переменной:
 *
 *  private void setSomeVariables(Room room) {
 *      List<RoomVariable> listOfVars = new ArrayList<RoomVariable>();
 *      listOfVars.add( new SFSRoomVariable("bgImage", "coolBackground.jpg") );
 *      listOfVars.add( new SFSRoomVariable("stars", 4) );
 *
 *      RoomVariable hiddenVar = new SFSRoomVariable("isPremiumUsersOnly", true);
 *      hiddenVar.setHidden(true);
 *      listOfVars.add(hiddenVar);
 *
 *      // Set variables
 *      sfsApi.setRoomVariables(null, room, listOfVars)
 *  }
 * Как мы видим, переменная hiddenVar помечена как скрытая и не доступна клиенту. Только код на стороне сервера может ее проверить. Это
 * можно использовать, например, при создании комнаты только для премиум пользователей.
 * Серверные Экстеншены. Могут быть динамически встроены в Комнату при создании. Они включаются разработчиком для добавления доп. логики
 * Комнате. Обычно, это нужно для игр, продвинутой модерации и т д.
 *
 * */

package smartfox.dev_basics;

public class RoomArchitecture_03 {
}
