/**
 *
 * Вспомним, что контейнер Docker - это образ Docker, "вызванный" к жизни. Это самодостаточная ОС, в которой имеется код
 * приложения и только самое необходимое для его работы. Контейнеры Docker - это выполняющиеся образы Docker.
 * В самом сердце Docker находятся файлы Dockerfile. Подобные файлы сообщают Docker о том, как собирать образы, на
 * основе которых создаются контейнеры. Каждому образу Docker соответствует файл, который называется Dockerfile.
 * Его имя записывается именно так, без расширения. При запуске docker build для создания нового образа,
 * подразумевается, что Dockerfile находится в текущей директории. Если это не так, нужную директорию можно указать
 * через флаг -f.
 * Как мы выяснили в первом уроке, контейнеры состоят из слоев. Каждый слой, кроме последнего, находящегося поверх всех
 * остальных, предназначен только для чтения. Dockerfile сообщает системе Docker о том, какие слои и в каком порядке
 * надо добавить в образ. На самом деле, каждый слой - это всего лишь файл, который описывает изменение состояния образа
 * в сравнении с тем состоянием, в котором он пребывал после добавления предыдущего слоя.
 * Базовый образ - это то, что является исходным слоем (или слоями) создаваемого образа. Базовый образ еще называют
 * родительским образом. То есть это то, с чего начинается образ Docker. Когда образ скачивается из удаленного
 * репозитория на локальный компьютер, то физически скачиваются лишь слои, которых на этом компьютере нет. Docker
 * стремится экономить пространство и время путем повторного использования существующих слоев.
 *
 * В файлах Dockerfile содержатся инструкции по созданию образа. С них, набранных заглавными буквами, начинается этот
 * файл. После инструкций идут их аргументы. Пример:
 *      FROM ubuntu:18.04
 *      COPY . /app
 * Слои в итоговом образе создают только инструкции FROM, RUN, COPY и ADD. Другие инструкции что-то настраивают,
 * описывают метаданные, или сообщают Docker о том, что во время выполнения контейнера нужно что-то сделать, например -
 * открыть какой-то порт или выполнить какую-то команду. Вот список инструкций с краткими комментариями:
 *  FROM - задает базовый(родительский) образ.
 *  LABEL - описывает метаданные, например, сведения о том, кто создал и поддерживает образ.
 *  ENV - устанавливает переменные окружения(среды).
 *  RUN - выполняет команду и создает слой образа. Используется для установки в контейнер пакетов.
 *  COPY - копирует в контейнер файлы и папки.
 *  ADD - копирует файлы и папки в контейер и может распаковывать локальные .tar файлы.
 *  CMD - описывает команду с аргументами, которую нужно будет выполнить, когда контейнер будет запущен. Аргументы могут
 *          быть переопределены при запуске контейнера. В файле может присутствовать лишь одна инструкция CMD.
 *  WORKDIR - задает рабочую директорию для следующей инструкции.
 *  ARG - задает переменные для передачи Docker во время сборки образа.
 *  ENTRYPOINT - предоставляют команду с аргументами для вызова во время выполнения контейнера. Аргументы не
 *          переопределяются.
 *  EXPOSE - указывает на необходимость открыть порт.
 *  VOLUME - создает точку монтирования для работы с постоянным хранилищем.
 *
 * Теперь подробнее.
 * Файл Dockerfile должен начинаться с инструкции
 *
 *
 * */

package docker;

public class L3 {
}
