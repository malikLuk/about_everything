/**
 *
 * Вспомним, что контейнер Docker - это образ Docker, "вызванный" к жизни. Это самодостаточная ОС, в которой имеется код
 * приложения и только самое необходимое для его работы. Контейнеры Docker - это выполняющиеся образы Docker.
 * В самом сердце Docker находятся файлы Dockerfile. Подобные файлы сообщают Docker о том, как собирать образы, на
 * основе которых создаются контейнеры. Каждому образу Docker соответствует файл, который называется Dockerfile.
 * Его имя записывается именно так, без расширения. При запуске docker build для создания нового образа,
 * подразумевается, что Dockerfile находится в текущей директории. Если это не так, нужную директорию можно указать
 * через флаг -f.
 * Как мы выяснили в первом уроке, контейнеры состоят из слоев. Каждый слой, кроме последнего, находящегося поверх всех
 * остальных, предназначен только для чтения. Dockerfile сообщает системе Docker о том, какие слои и в каком порядке
 * надо добавить в образ. На самом деле, каждый слой - это всего лишь файл, который описывает изменение состояния образа
 * в сравнении с тем состоянием, в котором он пребывал после добавления предыдущего слоя.
 * Базовый образ - это то, что является исходным слоем (или слоями) создаваемого образа. Базовый образ еще называют
 * родительским образом. То есть это то, с чего начинается образ Docker. Когда образ скачивается из удаленного
 * репозитория на локальный компьютер, то физически скачиваются лишь слои, которых на этом компьютере нет. Docker
 * стремится экономить пространство и время путем повторного использования существующих слоев.
 *
 * В файлах Dockerfile содержатся инструкции по созданию образа. С них, набранных заглавными буквами, начинается этот
 * файл. После инструкций идут их аргументы. Пример:
 *      FROM ubuntu:18.04
 *      COPY . /app
 * Слои в итоговом образе создают только инструкции FROM, RUN, COPY и ADD. Другие инструкции что-то настраивают,
 * описывают метаданные, или сообщают Docker о том, что во время выполнения контейнера нужно что-то сделать, например -
 * открыть какой-то порт или выполнить какую-то команду. Вот список инструкций с краткими комментариями:
 *  FROM - задает базовый (родительский) образ.
 *  LABEL - описывает метаданные, например, сведения о том, кто создал и поддерживает образ.
 *  ENV - устанавливает переменные окружения (среды).
 *  RUN - выполняет команду и создает слой образа. Используется для установки в контейнер пакетов.
 *  COPY - копирует в контейнер файлы и папки.
 *  ADD - копирует файлы и папки в контейер и может распаковывать локальные .tar файлы.
 *  CMD - описывает команду с аргументами, которую нужно будет выполнить, когда контейнер будет запущен. Аргументы могут
 *          быть переопределены при запуске контейнера. В файле может присутствовать лишь одна инструкция CMD.
 *  WORKDIR - задает рабочую директорию для следующей инструкции.
 *  ARG - задает переменные для передачи Docker во время сборки образа.
 *  ENTRYPOINT - предоставляют команду с аргументами для вызова во время выполнения контейнера. Аргументы не
 *          переопределяются.
 *  EXPOSE - указывает на необходимость открыть порт.
 *  VOLUME - создает точку монтирования для работы с постоянным хранилищем.
 *
 * Теперь подробнее. Инструкция FROM.
 * Файл Dockerfile должен начинаться с инструкции FROM, или с инструкции ARG, за которой идет инструкция FROM. Ключевое
 * слово FROM сообщает Docker, что при сборке образа, нужно использовать базовый (родительский) образ, соответствующий
 * указаннмоу имени и тегу. В примере выше, базовый образ хранится в репозитории ubuntu. Ubuntu - это название
 * официального репозитория Docker, предоставляющего базовую версию ОС Ubuntu. Обратим внимание, что рассматриваемый
 * пример включает в себя тег 18.04, уточняющий то, какой именно образ нам нужен. Если тег в инструкцию не включен, то
 * Docker исходит из предположения, что нам нужна последняя версия образа из репозитория.
 * Взглянем на другой, более сложный, пример Dockerfile'а, который собирает маленький образ:
 *
 *      FROM python:3.7.2-alpine3.8
 *      LABEL maintainer="malik.lukmanov@gmail.com"
 *      ENV ADMIN="Malik"
 *      RUN apk update && apk upgrade && apk add bash
 *      COPY . ./
 *      ADD https://raw.githubusercontent.com/discdiver/pachy-vid/master/sample_vids/vid1.mp4 \ /my_app_directory
 *      RUN ["mkdir", "/a_directory"]
 *      CMD ["python", "./my_script.py"]
 *
 * Итак, базой для этого образа является официальный образ Python с тегом 3.7.2-alpine3.8. Если посмотреть на код
 * https://github.com/docker-library/python/blob/ab8b829cfefdb460ebc17e570332f0479039e918/3.7/alpine3.8/Dockerfile, то
 * можно понять базовый образ включает в себя Alpine Linux и Python и, в общем-то, все. Образы ОС Alpine весьма
 * популярны в мире Docker. Дело в том, что они отличаются маленькими размерами, высокой скоростью работы и
 * безопасностью. Однако, образы Alpine не отличаются широтой возможностей, характерной для обычных ОС. Поэтому, чтобы
 * собрать на основе этого образа что-то дельное, создателю нужно установить в него необходимые пакеты.
 *
 * Инструкция LABEL.
 * Позволяет добавлять в образ метаданные. В случае с рассматриваемым сейчас файлом, она включает в себя e-mail
 * создателя образа. Объявление меток не замедляет процесс сборки образа и не увеличивает его размер. Они лишь содержат
 * в себе полезную информацию об образе Docker, поэтому их рекомендуется включать в файл.
 *
 * Инструкция ENV.
 * Позволяет задавать постоянные переменные среды, которые будут доступны в контейнере во время его выполнения. В
 * предыдущем примере после создания контейнера можно пользоваться переменной ADMIN. Инструкция ENV хорошо подходит для
 * задания констант.
 *
 * Инструкция RUN.
 * Позволяет создать слой во время сборки образа. После ее выполнения, в образ добавляется новый слой, его состояние
 * фиксируется. Инструкция RUN часто используется для установки в образы дополнительных пакетов. В предыдущем примере
 * инструкция RUN apk update && apk upgrade сообщает Docker о том, что системе нужно обновить пакеты из базового образа.
 * Далее идет команда && apk add bash, указывающая на то, что в образ надо установить bash. Буквы apk в командах - это
 * сокращение от Alpine Linux package manager, то есть менеджер пакетов Alpine Linux. Если бы мы использовали, скажем,
 * Ubuntu, то для установки пакетов мы бы написали RUN apt-get, вместо RUN apk.
 * Инструкция RUN и схожие с ней инструкции CMD и ENTRYPOINT, могут быть использованы либо в exec-форме либо в shell-
 * форме. Exec-форма использует синтаксис, напоминающий опсиание JSON-массива. Например, это может выглядеть так:
 *      RUN ["my_executable", "first_param", "second_param"].
 * В примере RUN apk update && apk upgrade && apk add bash мы использовали shell-форму. Чуть ниже, есть вариант и с
 * exec-формой RUN ["mkdir", "/a_directory"] для создания директории.
 *
 * Инструкция COPY.
 * Просто сообщает Docker что и куда копировать. Если целевая директория не существует - инструкция COPY создаст ее.
 *
 * Инструкция ADD.
 * Позволяет решать те же задачи, что и COPY, но с ней связана еще пара вариантов использования. Так, с помощью этой
 * инструкции можно добавлять в контейнер файлы, загруженные из удаленных источников, а также распаковывать локальные
 * .tar файлы. В нашем примере инструкция ADD используется для копирования файла, доступного по URL, в директорию
 * контейнера my_app_directory. Однако, документация предлагает не злоупотреблять инструкцией ADD и везде, где это
 * возможно использовать инструкцию COPY.
 *
 * ИНструкция CMD.
 * CMD предоставляет Docker команду, которую нужно выполнить при запуске контейнера. Результаты выполнения этой команды
 * не добавляются в образ во время его сборки. В нашем примере, с помощью инструкции CMD запускается питоновский скрипт
 * my_script.py во время выполнения контейнера. Есть несколько вещей, который нужно знать об инструкции CMD:
 *      - В одном dockerfile может присутствовать лишь одна инструкция CMD. Если в файле несколько таких инструкций,
 *              то система проигнорирует все, кроме последней.
 *      - инструкция CMD может иметь exec-форму. Если в эту инструкцию не входит упоминание исполняемого файла, тогда в
 *              файле должна присутствовать инструкция ENTRYPOINT.
 *      - аргументы командной строки, передаваемые docker run, переопределяют аргументы, предоставленные инструкции CMD
 *              в файле dockerfile.
 * Еще более сложный dockerfile:
 *
 *
 *
 * */

package docker;

public class L3 {
}
