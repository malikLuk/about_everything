/**
 *
 *                                                  https://habr.com/ru/post/281406/
 *                                                      Вкратце об OpenID Connect
 * SSO (Single Sign-On) - технология, при использовании которой пользователь переходит из одного раздела какого-либо
 * ресурса в другой без повторной аутентификации. То есть, пользователю не нужно многократно вводить данные своей учетной
 * записи.
 * Одна из реализаций SSO - стек OpenID (в чатсности, OpenID Connect).
 * Для того, чтобы пользователь мог совершить OpenID Connect запрос, он должен иметь следующую информацию о сервере:
 *  - Идентификатор клиента (client identifier) - уникальный идентификатор, выданный клиенту, чтобы идентифицировать себя
 *          на сервере.
 *  - Клиетский ключ (client secret) - общий секретный ключ, установленный между сервером авторизации и клиентом.
 *          Используется для подписи запросов.
 *  - Адрес пользовательской авторизации (end-user authorization endpoint) - URL адрес HTTP запроса к ресурсу сервера,
 *          способного аутентифицировать и авторизовать пользователя.
 *  - Адрес выдачи токена (token endpoint) - ресурс на сервере авторизации, обеспечивающий выдачу токенов.
 *  - Адрес пользовательской информации (user info endpoint) - защищенный ресурс, который при предъявлении токена, возвращает
 *          авторизованному клиенту информацию о текущем пользователе.
 * Построение клиентом запроса для получения токена.
 * Для того, чтобы превратить запрос OAuth 2.0 в запрос OpenID Connect, нужно просто добавить ключ OpenID в набор данных,
 * в параметр scope. Установив в параметре ключ OpenID, клиент запрашивает идентификатор для пользователя, а также контекст
 * аутентификации. Выглядит это, примерно, так.
 * GET /authorize?grant_type=token%20id_token&scope=openid%20proflie&redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb HTTP/1.1
    Host: server.example.com
 * Получение OpenID Connect ответа.
 * Если пользователь будет авторизован клиентским запросом, то клиент получит токен авторизации OAuth 2.0, который, как
 * правило, включает в себя два параметра: access_token и id_token. id_token закодирован и представляет собой JSON со
 * следующими полями:
 *  - aud (аудитория) - обязательно поле. Идентификатор клиент (client_id) для которого этот id_token предназначен
 *  - exp (окончание) - обязательное поле. Время, после которого токен становится недействительным
 *  - sub - обязательное поле. Локально уникальный и никогда не переназначаемый идентификатор для пользователя (субъекта).
 *          Например, "24400320" или "AitOawmwtWwcT0k51BayewNvutrJUqsvl6qs7A4"
 *  - iss (эмитент) - обязательное поле. Адрес HTTPS:URI с указанием полного имени хоста эмитента, который в паре с user_id
 *          создает глобально уникальный и никогда не переназначемый идентификатор. Например, "https://aol.com",
 *          "https://google.com", или "https://sakimura.org"
 *  - nonce - обязательное поле. Установленное сервером значение, отправленное в запросе.
 *
 * */

package habr.open_id;

public class OpenId {
}
