/**
 *
 *                                              Проектирование Rest API.
 * REST - это Representational State Transfer или передача состояния представления. Если сказать лучше - это представление
 * данных в удобном для клиента формате. По сути, REST - не протокол и не стандарт, а подход, архитектурный стиль для
 * проектирования API.
 * Принципы REST
 * 1. Клиент-серверная архитерктура.
 * 2. Любые данные - ресурс
 * 3. Любой ресурс имеет ID, по которому можно получить данные.
 * 4. Ресурсы могут быть связаны между собой - для этого в составе ответа передается либо ID, либо, как чаще рекомендуется,
 * ссылка.
 * 5. Используются стандартные методы HTTP (GET, POST, PUT, DELETE) - так как они уже заложены в составе протокола.
 * 6. Сервер не хранит состояние - это значит, что сервер не отделяет один вызов от другого, не сохраняет сессии в
 * памяти. Если у нас целая ферма сервером, реализующих наш сервис - необязательно синхронизировать или каким-то образом
 * согласовывать их.
 * То, что хорошо бы было реализовать в каждом REST-сервисе.
 * 1. SSL - криптографичекий протокол, позволяющий реализовать безопасную связь. Эволюционировал в TSL.
 * 2. Докумепнтация и версионность сервиса с первого дня его работы.
 * 3. Методы PUT и POST должны возвращать обратно объект, который они создали или изменили - сокращает время обращения к
 * сервису.
 * 4. Поддержка фильтрации, сортировки и постраничного вывода.
 * 5. Поддержка MediaType - это способ сказать серверу, в каком формате мы хотим получить содержимое(XML/JSON etc).
 * 6. Не сжимать или как-то иначе минимизировать запросы и ответы.
 * 7. Пользоваться стандартными кодами ошибок HTTP.
 * Все методы, за исключением POST, идемпотентны. Идемпотентность - возможность выполнить одно и то же обращение к REST
 * сервису несколько раз, при этом каждый раз ответ будет одинаковым. Кроме этого, надо учесть, что только GET не изменяет
 * содержимого.
 * Все ресурсы REST - материальные. Их можно потрогать. Возьмем, например, модель с расписанием движения поездов. Вот
 * примеры простейших REST запросов.
 *  Корневые сущности API:
 *      - GET /stations      -   получить все вокзалы
 *      - GET /stations/123  -   получить информацию по вокзалу с ID = 123
 *      - GET /trains        -   расписание всех поездов
 *  Зависимые от корневой сущности
 *      - GET /stations/555/departures  -   поезда, уходящие с вокзала с ID = 55
 *
 *
 * */

package habr.rest_api;

public class BuildingRest {
}
