/**
 *
 * С помощью OAuth пользователь разрешает определенному сайту получить свои закрытые данные из соцсетей, но без передачи сайту своих логинов/
 * паролей. Например, когда мы регистрируемся на сайте через facebook, то как раз разрешаем сайту получить из facebook наше имя, почту и другие
 * закрытые данные. Как это работает sn.png.
 * Стандарт определяет следующие роли:
 *  - Resource Owner - пользователь, который заходит на сайт и дает ему разрешение использовать свои закрытые данные из Соцсети.
 *  - Client (сайт) - приложение (или интернет-сайт), которым пользуется пользователь и которое взаимодействует с Authorization Server
 *          и Resource Server для получения закрытых данных пользователя.
 *  - Authorization Server - сервер, который проверяет логин/пароль пользователя, в нашем случае Соцсеть
 *  - Resource Server - хранит закрытую пользовательскую информацию, которую можно получить с помощью API. Authorization Server и
 *          Resource Server могут быть совмещены в одну систему.
 *
 * Authorization flow:
 *  - перед началом авторизации необходимо зарегистрировать приложение(сайт) в Соцсети
 *  - Разработчик приложения задает Name (имя приложение), Homepage (адрес домашней страницы) и Callback (адрес, на который
 *          Соцсеть перенаправит пользователя после успешной авторизации)
 *  - Соцсеть выдает Client ID (иногда его называют AppId) и Client Secret
 *  - Client ID и Client Secret разработчик должен прописать в своем Client (приложении)
 *
 * Более детально:
 * 1. Resource Owner заходит на Client (в приложение), выбирает опцию "войти с помощью соцсети", приложение перенаправляет
 *          пользователя на Authorization Server Соцсети.
 * 2. Authorization Server Соцсети проверяет, есть ли у пользователя активная сессия и, если нет, то показывает форму логина.
 * 3. Resource Owner вводит свои логин/пароль и подтверждает, что определенные закрытые данные могут быть использованы нашим приложением,
 *          например, имя пользователя или email-адрес.
 * 4. Authorization Server проверяет пользователя и перенаправляет его на адрес Callback с результатом аутентификации и "Authorization Code".
 * 5. В ответ, Client (наше приложение) посылает "Authorization Code", Client ID и Client Secret.
 * 6. Authorization Server проверяет присланные данные и формирует access token в формате JWT, подписанный своим приватным ключом. Там же
 *          может содержаться и refresh token, с помощью которого возможно восстановление сесси после ее окончания.
 * 7. После этого Client (наше приложение) может запросить закрытую информацию пользователя с помощью вызова API, в который передается
 *          полученный ранее access token.
 * 8. Resource Server проверяет access token (например, используя открытый ключ Authorization Server) и предоставляет доступ к данным
 *          пользователя.
 *
 * */

package habr.authentication;

public class OAuth2 {
}
